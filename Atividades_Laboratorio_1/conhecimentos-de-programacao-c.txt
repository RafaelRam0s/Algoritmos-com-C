

Como escrever e ler uma string:
    
    #include <stdio.h>

    int main()
    {

        char nome[10];
        printf("Escreva seu nome:\n");
        
        fflush(stdin); // Limpa a entrada, então se por exemplo tiver um scanf anterior e a pessoa digitou diversas palavras com espaço ele limpa o que foi escrito antes para não pegar escrita de outra saída

        fgets(nome, 10, stdin);

        printf("Nome escrito: %s", nome);
        
        return 0;
    }

Biblioteca string:

    #include <string.h>

    strcmp (s1, s2): comparação de strings
    strlen(s1): devolve o tamanho da string
    strcpy(para, de): copia string
    strcat(str1,str2): concatena duas strings
    strupr(str): coloca str em letras maiúsculas
    strlwr(str): coloca str em letras minúsculas

Gerar número aleatório entre 2 intervalos:
    #include <stdlib.h>
    
    rand() % (valor_maximo + 1);
    
Ponteiros:

    {
        #include <stdio.h>

        int main() 
        {
            int *ponteiro = NULL;

            int x = 10;

            ponteiro = &x;

            printf("%d", *ponteiro); // 10

            return 0;
        }
    }

    {
        #include <stdio.h>

        int main() 
        {
            char teste;

            printf("%p\n", &teste);

            return 0;
        }
    }

Verificar tamanho em bytes que uma variável ocupa:

    #include <stdio.h>

    int main()
    {
        
        int variavel_inteira = 1;
        float variavel_flutuante = 2;
        char variavel_caractere = '3';
        short int variavel_pequena_inteira = 4;
        double variavel_flutuante_double = 5;
        
        printf("Teste variavel_inteira: %ld \n", sizeof(variavel_inteira)); // 4
        printf("Teste variavel_flutuante: %ld \n", sizeof(variavel_flutuante)); // 4
        printf("Teste variavel_caractere: %ld \n", sizeof(variavel_caractere)); // 1
        printf("Teste variavel_pequena_inteira: %ld \n", sizeof(variavel_pequena_inteira)); // 2
        printf("Teste variavel_flutuante_double: %ld \n", sizeof(variavel_flutuante_double)); // 8

        printf("Teste variavel_inteira: %ld \n", sizeof(int)); // 4
        printf("Teste variavel_flutuante: %ld \n", sizeof(float)); // 4
        printf("Teste variavel_caractere: %ld \n", sizeof(char)); // 1
        printf("Teste variavel_pequena_inteira: %ld \n", sizeof(short int)); // 2
        printf("Teste variavel_flutuante_double: %ld \n", sizeof(double)); // 8

        return 0;
    }

Ponteiro como vetor:
    
    #include <stdio.h>

    int main()
    {
        
        int v[2] = { 2, 3 };
        
        int *a = v;
        
        *(a + 1) = 5; //v[1]=2;

        printf("Teste: { %d, %d }", *(a + 0), *(a + 1));
        
        return 0;
    }

Alocação de memória dinâmica:

    #include <stdio.h>
    #include <stdlib.h>

    int main()
    {
        int *a = NULL;
        a = (int *) malloc( sizeof(int) );
        
        if ( a == NULL)
        {
            printf("O sistema operacional não possue memória o suficiente para fornecer o espaço solicitado");
        }

        *a = 2;
        printf("Teste: %d", *a);

        free(a);
        a = NULL;

        return 0;
    }

    Alocação dinâmica de vetor:
        #include<stdio.h>
        #include<stdlib.h>
        int main()
        {// alocando um vetor com n inteiros
            
            int n,i;
            scanf(“%d”,&n);
            int *v = (int*) malloc(n * sizeof(int));

            if (v)
            {
                for(i=0; i<n ; i++)
                    scanf(“%d”,& (v+i) );
                for(i=0; i<n ; i++)
                    printf("%d\n", *(v+i));
            }
        }








